The backup and restore scripts should be run on a Separate machine than the Active machine and the Backup machine.

On the Separate linux machine git clone the repository to have access to these scripts.
then do ```chmod +x backup.sh restore.sh``` in the same folder as them to make them executable.

In both the Active and the Backup add a public ssh key from the Separate to the .ssh/authorized_keys file, in a new
line.

On the Separate add the crontab configuration so the backup.sh runs every hour:
```crontab -e``` and then add to the file ```10 * * * * /bin/sh backup.sh    # every hour at 10"```, which will make
backup.sh run every hour on the 10th minute.

On the Backup machine, .net 8.0 sdk should be preinstalled, along with nano and nginx. Also, so that the deploy works
from GitHub to the new server, the deploy.yml workflow should be updated with the new server's ip address. And also the
deployer user should be created with the same ssh .pub key we talked about earlier.

In case of disaster all that is needed is to run on the Separate .restore.sh.

If all is preinstalled and ssh keys configured in the Backup server previously, than in case of disaster, the backup
server should be up and running in just a couple of minutes according to our simulation drills.