%Instruções: Activar os writes em inicializar para escolher condições de seleção e dimensão dos dados.
%Usar generate. para correr o algoritmo. 
%Variar as condições de paragem caso desejado, nº gerações, tempo, valor otimo e consistencia.

:-dynamic generations/1.
:-dynamic population/1.
:-dynamic prob_crossover/1.
:-dynamic prob_mutation/1.

% task(Id,ProcessTime,DueTime,PenaltyWeight).
task(t1,2,5,1).
task(t2,4,7,6).
task(t3,1,11,2).
task(t4,3,9,3).
task(t5,3,8,2).

% tasks(NTasks).
tasks(5).

%Ler e organizar os parametros iniciais.
% parameters initialization
initialize:-
    % Recebe numero geraçoes
    %write('Number of new generations: '),read(NG), 			
    (retract(generations(3000));true), asserta(generations(3000)),
    % Recebe tamanho populaçao
	%write('Population size: '),read(PS),
	(retract(population(5));true), asserta(population(5)),
    %Recebe probabilidade crossover
	%write('Probability of crossover (%):'), read(P1),
	%PC is P1/100,
    PC is 50/100,
	(retract(prob_crossover(50));true), 	asserta(prob_crossover(PC)),
    %Recebe probabilidade mutaçao
	%write('Probability of mutation (%):'), read(P2),
	%PM is P2/100, 
    PM is 50/100, 
	(retract(prob_mutation(50));true), asserta(prob_mutation(PM)).

generate:-
    %Recebe dados do user
    initialize,
    %Gera populaçao inicial de individuos
    generate_population(Pop),
    write('Pop='),write(Pop),nl,
    evaluate_population(Pop,PopValue),
    write('PopValue='),write(PopValue),nl,
    order_population(PopValue,PopOrd),
    generations(NG),
    %write(NG),
    get_time(StartTime),
    %write(StartTime),
    %Aqui é onde serao geradas as proximas geraçoes depois da 0 de acordo com
    %O numero de geraçoes escolhidas NG
    write("Start"),nl,
    catch(
        generate_generation(StartTime, 0, NG, PopOrd,_),
        best_solution_reached(BestSolution),
        (
            write('Best solution: '), write(BestSolution), nl
        )
    ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
generate_population(Pop):-
    %Tamanho da populaçao
    population(PopSize),
    %total de tarefas
    tasks(NumT),
    %Cria a lista com as tarefas
    findall(Task,task(Task,_,_,_),TasksList),
    %Gera populaçoes
    generate_population(PopSize,TasksList,NumT,Pop).
generate_population(0,_,_,[]):-!.
generate_population(PopSize,TasksList,NumT,[Ind|Rest]):-
    PopSize1 is PopSize-1,
    generate_population(PopSize1,TasksList,NumT,Rest),
    %Gera individuo
    generate_individual(TasksList,NumT,Ind),
    %Verifica se não é duplicado
    not(member(Ind,Rest)).
generate_population(PopSize,TasksList,NumT,L):-
    generate_population(PopSize,TasksList,NumT,L).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%isto equivale a gerar os cromossomas
generate_individual([G],1,[G]):-!.
generate_individual(TasksList,NumT,[G|Rest]):-
    NumTemp is NumT + 1, % to use with random
    %Gera tarefa aleatoriamente
    random(1,NumTemp,N),
    %Remove essa tarefa para nao haver duplicados
    remove(N,TasksList,G,NewList),
    NumT1 is NumT-1,
    generate_individual(NewList,NumT1,Rest).
remove(1,[G|Rest],G,Rest).
remove(N,[G1|Rest],G,[G1|Rest1]):- N1 is N-1,
            remove(N1,Rest,G,Rest1).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Avaliaçao populaçao, individuo a individuo
evaluate_population([],[]).
evaluate_population([Ind|Rest],[Ind*V|Rest1]):-
    evaluate(Ind,V),
    evaluate_population(Rest,Rest1).

evaluate(Seq,V):- evaluate(Seq,0,V).
%Avalia o tempo final se ultrapassar o prazo leva penalizaçao
evaluate([ ],_,0).
evaluate([T|Rest],Inst,V):-
    task(T,Dur,Due,Pen),
    FinInst is Inst+Dur,
    evaluate(Rest,FinInst,VRest),
    ((FinInst =< Due,!, VT is 0) ; (VT is (FinInst-Due)*Pen)),
    V is VT+VRest.

%Ordena populaçao do mais forte para o mais fraco(numero menor melhor resultado)
order_population(PopValue,PopValueOrd):-
    bsort(PopValue,PopValueOrd).

bsort([X],[X]):-!.
bsort([X|Xs],Ys):-
    bsort(Xs,Zs),
    bchange([X|Zs],Ys).

bchange([X],[X]):-!.
bchange([X*VX,Y*VY|L1],[Y*VY|L2]):-
    VX>VY,!,
    bchange([X*VX|L1],L2).
bchange([X|L1],[X|L2]):-bchange(L1,L2).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Aqui é gerado as proximas gerações com possibilidade de crossover e mutation.
generate_generation(_,G,G,Pop,_):-!,
	write('Generation '), write(G), write(':'), nl, write(Pop), nl.
generate_generation(StartTime,N,G,Pop,StableCount):-
    %write("Novo ciclo"),nl,
    population(PopSize),
    %write(Pop),nl,
    %write(PopSize),
    % Identifica o melhor indivíduo
    %find_best_individual(Pop, BestInd),
    order_population(Pop,PopOrdShow),
	write('Generation '), write(N), write(':'), nl, write(PopOrdShow), nl,
    %%%%%%%%%%%%%%%%%%%%%%%
    % Paragem por tempo
    get_time(CurrentTime),
    TotalTime is CurrentTime - StartTime,
    % Check if the time limit is exceeded
    %write(TotalTime),
    (   TotalTime > 1000
    ->  write('Time limit reached! Terminating...'), nl,
        PopOrdShow = [BestSolution|_], 
        throw(best_solution_reached(BestSolution))
    ;   true
    ),
    (   
    PopOrdShow = [_*FirstIndValue | _],
    FirstIndValue < 9
    ->  write('Specific evaluation reached! Terminating...'), nl,
        PopOrdShow = [BestSolution|_],
        throw(best_solution_reached(BestSolution))
    ;   true
    ),
    %%%%%%%%%%%%%%%%%%%%%%%%
    %Randomiza a lista para quando ocorrer crossover nao ser sempre entre os mesmos
    %Individuos
    %write("Pop"),write(Pop),nl,
    random_permutation(Pop,RPop),
    %write("RPop"),write(RPop),nl,
	crossover(RPop,NPop1),
    %write("NPop1"),write(NPop1),nl,
	mutation(NPop1,NPop),
    %write("NPop"),write(NPop),nl,
	evaluate_population(NPop,NPopValue),
    %write("NPopValue"),write(NPopValue),nl,
	order_population(NPopValue,NPopOrd),
    %write("NPopOrd"),write(NPopOrd),nl,
    %write(NPopOrd),nl,
    % Adiciona o melhor indivíduo à nova população
    %replace_worst(NPopOrd, BestInd, NPopElitist),
	%order_population(NPopElitist,NPopOrd1),
    %Seleçao nao elitista
    %write("Aqui"),
    %write("Pop"),write(Pop),nl,
    non_elitist_selection(Pop,NPopOrd,FilteredPop,Best),
    %write("FilteredPop"),write(FilteredPop),nl,
    %write("Best"),write(Best),nl,
    %write("Aqui"),
    %write(FilteredPop),nl,
    %write("Pop"),write(Pop),nl,
    %write("PopSize"),write(PopSize),nl,
    replace_worst_in_pop(FilteredPop,Pop,PopSize,NewPop), %AQUI!!!!!!!!!
    %write("NewPop"),write(NewPop),nl,
    %write("Best"),write(Best),nl,
    replace_worst(NewPop,Best,Result),
    %write("Result"),write(Result),nl,
	N1 is N+1,
    %write(N1),nl,
    %write(Result),nl,
    %write("N1"),write(N1),nl,
    %write("G"),write(G),nl,
    %write("Result"),write(Result),nl,
    % Verifica estabilidade da população
    (   Result = Pop
    ->  NewStableCount is StableCount + 1
    ;   NewStableCount is 0
    ),
    
    % Se a população estiver estável por 10 gerações, interrompe
    (   NewStableCount >= 10
    ->  write('Population stable! Terminating...'), nl,
        PopOrdShow = [BestSolution|_],
        throw(best_solution_reached(BestSolution))
    ;   true
    ),
	generate_generation(StartTime,N1,G,Result,NewStableCount).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
replace_worst_in_pop(FilteredPop, Pop, PopSize, NewPop) :-
    % Filtrar os elementos de FilteredPop que já existem em Pop
    exclude(already_in_pop(Pop), FilteredPop, UniqueFilteredPop),
    % Combinar os indivíduos de FilteredPop (apenas os únicos) com Pop
    append(UniqueFilteredPop, Pop, CombinedPop),
    % Garantir o tamanho máximo da população e manter os melhores
    sort(CombinedPop, SortedPop),
    length(NewPop, PopSize),
    append(NewPop, _, SortedPop).

% Verifica se um indivíduo já está na população
already_in_pop(Pop, Individual) :-
    member(Individual, Pop).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Seleçao nao elitista
% Predicado para combinar populações
merge_populations(CurrentPop, NewPop, CombinedPop) :-
    append(CurrentPop, NewPop, CombinedPop).
% Predicado para remover duplicados
remove_duplicates(Pop, UniquePop) :-
    sort(Pop, UniquePop).
% Seleção não elitista
non_elitist_selection(CurrentPop, NewPop, TopP,Best) :-
    % Combinar populações
    %write("Entrou"),
    merge_populations(CurrentPop, NewPop, CombinedPop),
    % Remover duplicados
        %write("Entrou"),
    remove_duplicates(CombinedPop, FilteredPop),
        %write("Entrou"),
    order_population(FilteredPop,OrderedFPop),
        %write("Entrou 20"),
    select_top_20_percent(OrderedFPop,TopP,Remaining),
        %write("Entrou"),
    %write("Remainign:"),
    %write(Remaining),
    apply_random_factor(Remaining,Result),
        %write("Entrou"),
    %write(Result),
    order_population3(Result,Sorted),
    %write("Entrou"),
    %write(Sorted),
    find_best_individual(Sorted,BestZ),
    %write("Best"),
    %write(BestZ),
    remove_Z(BestZ,Best).
    %write(TopP),
    %write(Best),
    %join_selections(TopP, Best, FilteredPop),
    %write("FilteredPop"),
    %write(FilteredPop).

% Predicado para juntar as seleções
%join_selections(TopP, Best, NewPop) :-
    %NewPop = [Best | TopP].


% Selecionar os Top P indivíduos, onde P é 20% do tamanho da lista
select_top_20_percent(Population, TopP,Remaining) :-
    length(Population, N),          
    P is max(1, ceiling(0.2 * N)), 
    length(TopP, P),                
    append(TopP, Remaining, Population).
    %write("TopP:"),
    %write(TopP),
    %    write("Remaining:"),
    %write(Remaining),
    %    write("Population:"),
    %write(Population).
    
% Aplica um fator aleatório a cada elemento da lista Remaining.
apply_random_factor([], []). 
apply_random_factor([Remaining*Y | Tail], [Remaining*Y*Z | ResultTail]) :-
    random(0.0, 1.0, Random),
    Z is Y * Random,  
    apply_random_factor(Tail, ResultTail).

% Ordena a população com base no valor Z (terceiro valor) do mais fraco para o mais forte (número menor é o melhor resultado).
order_population3(PopValue, PopValueOrd) :-
    bsort3(PopValue, PopValueOrd).

bsort3([X], [X]) :- !.
bsort3([X|Xs], Ys) :-
    bsort3(Xs, Zs),
    bchange3([X|Zs], Ys).

% Função auxiliar para comparar os valores Z
bchange3([X], [X]) :- !.
bchange3([X*VX*VZ, Y*VY*VZ2 | L1], [Y*VY*VZ2 | L2]) :-
    VZ > VZ2, !,  % Compara o valor Z
    bchange3([X*VX*VZ | L1], L2).
bchange3([X*VX*VZ | L1], [X*VX*VZ | L2]) :-
    bchange3(L1, L2).

% Encontrar o melhor indivíduo (apenas [Indiv, Eval], sem o Product)
find_best_individual([R | _], R).

remove_Z(Item*Y*Z, Item*Y).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Adição do elitismo
%find_best_individual([Ind*V|Rest], Best):-
%    find_best_individual(Rest, Ind*V, Best).

%find_best_individual([], Best, Best).
%find_best_individual([Ind*V|Rest], Ind1*V1, Best):-
%    (V < V1, !, find_best_individual(Rest, Ind*V, Best));
%    find_best_individual(Rest, Ind1*V1, Best).

replace_worst(Pop, BestInd, Result) :-
    % Verificar se o BestInd já está em Pop
    (   member(BestInd, Pop)
    ->  % Se já está, não há substituição: Result é igual a Pop
        Result = Pop
    ;   % Caso contrário, substituímos o pior indivíduo
        append(Front, [_WorstInd], Pop),
        append(Front, [BestInd], Result)
    ).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Gera os crossovers
crossover([ ],[ ]).
crossover([Ind*_],[Ind]).
crossover([Ind1*_,Ind2*_|Rest],[NInd1,NInd2|Rest1]):-
	generate_crossover_points(P1,P2),
	prob_crossover(Pcruz),random(0.0,1.0,Pc),
	((Pc =< Pcruz,!,
        cross(Ind1,Ind2,P1,P2,NInd1),
	  cross(Ind2,Ind1,P1,P2,NInd2))
	;
	(NInd1=Ind1,NInd2=Ind2)),
	crossover(Rest,Rest1).


generate_crossover_points(P1,P2):- generate_crossover_points1(P1,P2).
generate_crossover_points1(P1,P2):-
	tasks(N),
	NTemp is N+1,
	random(1,NTemp,P11),
	random(1,NTemp,P21),
	P11\==P21,!,
	((P11<P21,!,P1=P11,P2=P21);P1=P21,P2=P11).
generate_crossover_points1(P1,P2):-
	generate_crossover_points1(P1,P2).

fillh([ ],[ ]).

fillh([_|R1],[h|R2]):-
	fillh(R1,R2).

sublist(L1,I1,I2,L):-I1 < I2,!,
    sublist1(L1,I1,I2,L).

sublist(L1,I1,I2,L):-sublist1(L1,I2,I1,L).

sublist1([X|R1],1,1,[X|H]):-!, fillh(R1,H).

sublist1([X|R1],1,N2,[X|R2]):-!,N3 is N2 - 1,
	sublist1(R1,1,N3,R2).

sublist1([_|R1],N1,N2,[h|R2]):-N3 is N1 - 1,
		N4 is N2 - 1,
		sublist1(R1,N3,N4,R2).

rotate_right(L,K,L1):- tasks(N),
	T is N - K,
	rr(T,L,L1).

rr(0,L,L):-!.

rr(N,[X|R],R2):- N1 is N - 1,
	append(R,[X],R1),
	rr(N1,R1,R2).

remove([],_,[]):-!.

remove([X|R1],L,[X|R2]):- not(member(X,L)),!,
        remove(R1,L,R2).

remove([_|R1],L,R2):-
    remove(R1,L,R2).

insert([],L,_,L):-!.
insert([X|R],L,N,L2):-
    tasks(T),
    ((N>T,!,N1 is N mod T);N1 = N),
    insert1(X,N1,L,L1),
    N2 is N + 1,
    insert(R,L1,N2,L2).


insert1(X,1,L,[X|L]):-!.
insert1(X,N,[Y|L],[Y|L1]):-
    N1 is N-1,
    insert1(X,N1,L,L1).

cross(Ind1,Ind2,P1,P2,NInd11):-
    sublist(Ind1,P1,P2,Sub1),
    tasks(NumT),
    R is NumT-P2,
    rotate_right(Ind2,R,Ind21),
    remove(Ind21,Sub1,Sub2),
    P3 is P2 + 1,
    insert(Sub2,Sub1,P3,NInd1),
    removeh(NInd1,NInd11).


removeh([],[]).

removeh([h|R1],R2):-!,
    removeh(R1,R2).

removeh([X|R1],[X|R2]):-
    removeh(R1,R2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Gera mutação
mutation([],[]).
mutation([Ind|Rest],[NInd|Rest1]):-
	prob_mutation(Pmut),
	random(0.0,1.0,Pm),
	((Pm < Pmut,!,mutacao1(Ind,NInd));NInd = Ind),
	mutation(Rest,Rest1).

mutacao1(Ind,NInd):-
	generate_crossover_points(P1,P2),
	mutacao22(Ind,P1,P2,NInd).

mutacao22([G1|Ind],1,P2,[G2|NInd]):-
	!, P21 is P2-1,
	mutacao23(G1,P21,Ind,G2,NInd).
mutacao22([G|Ind],P1,P2,[G|NInd]):-
	P11 is P1-1, P21 is P2-1,
	mutacao22(Ind,P11,P21,NInd).

mutacao23(G1,1,[G2|Ind],G2,[G1|Ind]):-!.
mutacao23(G1,P,[G|Ind],G2,[G|NInd]):-
	P1 is P-1,
	mutacao23(G1,P1,Ind,G2,NInd).
